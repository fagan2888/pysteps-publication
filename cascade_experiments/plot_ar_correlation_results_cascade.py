'''
Script ot plot the temporal autocorrelation functions of nowcasts and observatons 
that were previously generated by the script run_ar_correlation_tests_cascade.py
'''

import pickle
from matplotlib import pyplot
from matplotlib.pyplot import cm
import numpy as np

# the domain: "fmi" or "mch_hdf5"
domain          = "mch_hdf5"
n_levels_verif  = 8
recompute_flow  = False

filename = "data/%s_ar2_corr_results_%ilevels_recomputeflow-%s.dat" % (domain,n_levels_verif,recompute_flow)
with open(filename, "rb") as f:
    results = pickle.load(f)

leadtimes = results["leadtimes"]
num_cascade_levels = len(results["cc_obs"])

fig = pyplot.figure(figsize=(5, 3.75))
ax = fig.gca()

colors=iter(cm.Blues_r(np.linspace(0,1,num_cascade_levels+2)))
for i in range(num_cascade_levels):
    col = next(colors)
    ax.plot(leadtimes, results["cc_fct"][i] / results["n_fct_samples"][i], color=col, linestyle="--")
    ax.plot(leadtimes, results["cc_obs"][i] / results["n_obs_samples"][i], color=col)

lines = ax.get_lines()
l = pyplot.legend([lines[0], lines[1]], ["Forecasts", "Observations"],
                  fontsize=12, loc=(0.6, 0.92), framealpha=1.0)
ax.add_artist(l)

colors=iter(cm.Blues_r(np.linspace(0,1,num_cascade_levels+2)))
max_leadtime = np.max(leadtimes)
ax.text(150.0/150*max_leadtime, 0.85, '1', fontsize=10, color=next(colors))
ax.text(139.0/150*max_leadtime, 0.71, '2', fontsize=10, color=next(colors))
ax.text(120.0/150*max_leadtime, 0.35, '3', fontsize=10, color=next(colors))
ax.text(93.0/150*max_leadtime, 0.18, '4', fontsize=10, color=next(colors))
ax.text(75.0/150*max_leadtime, 0.07, '5', fontsize=10, color=next(colors))
ax.text(38.0/150*max_leadtime, 0.05, '6', fontsize=10, color=next(colors))
ax.text(15.0/150*max_leadtime, 0.05, '7', fontsize=10, color=next(colors))
ax.text(7.0/150*max_leadtime, 0.021, '8', fontsize=10, color=next(colors))

xt = np.hstack([[5], np.arange(0, np.max(leadtimes)+5, 20)])
ax.set_xticks(xt)
ax.set_xticklabels([int(v) for v in xt])
ax.tick_params(labelsize=10)

pyplot.grid(True)

pyplot.xlim(leadtimes[0], leadtimes[-1])
pyplot.ylim(-0.02, 1.1)

pyplot.xlabel("Lead time (minutes)", fontsize=12)
pyplot.ylabel("Correlation", fontsize=12)

figname = "figures/%s_ar2_correlations_%ilevels_recomputeflow-%s.pdf" % (domain,n_levels_verif,recompute_flow)
pyplot.savefig(figname, bbox_inches="tight")
print(figname, 'saved.')
