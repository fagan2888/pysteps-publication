"""
Plot the results of the DARTS sensitivity to different parameters.

This scripts reads the data generated by the
compute_optflow_comparison_us_darts.py script and
then aggregated using the script aggregate_optflow_comparison_us_darts.py

The data is stored in ./data/darts_tests folder.

"""
from os import makedirs
from os.path import join, isdir

from pylab import *

import pickle
from datetime import datetime


def create_dir(directory_path):
    """
    Create a directory if does not exists.
    """
    # Check if the directory exists
    if not isdir(directory_path):
        makedirs(directory_path)


def get_timestamp(date_input, **kwargs):
    """
    Function to safely return a timeStamp from either a datetime object or
    a string with the expected format (see Parameters).
    In case that input date is a string and does not have the
    expected format a fatalError exception is raised.

    If return_date is set to True, a tuple ( time_stamp, datetime )
    is returned.

    Parameters
    ----------

    format : str , optional
        Time stamp format string.
        Default value: %Y%m%dT%H%M%S

    return_date : bool , optional
        If returnDateTime is set to True, a tuple ( timeStamp, dateTimeObject )
        is returned. False by default.
    """

    time_stamp_format = kwargs.pop("format", "%Y%m%dT%H%M%S")
    return_date = kwargs.pop("return_date", False)

    if isinstance(date_input, str):

        time_stamp = date_input

        try:
            _date = datetime.datetime.strptime(time_stamp, time_stamp_format)
        except ValueError:
            raise Exception('Wrong date format. Expected YYYYMMDDThhmmss \n' +
                            'Received: ' + time_stamp)

    elif isinstance(date_input, datetime.datetime):
        _date = date_input
        time_stamp = date_input.strftime(time_stamp_format)

    else:
        raise Exception(
            "date_input need to be a string (%s) or a datetime object\n" %
            time_stamp_format +
            "Received: %s" % (type(date_input)))

    if return_date:
        return time_stamp, _date
    else:
        return time_stamp


if __name__ == "__main__":

    num_of_configs = 8
    config_to_plot = range(1, num_of_configs + 1)

    config_to_plot = [1, 5, 6, 8]

    # Configurations used

    # # configurations[1] = dict() # default params
    # # configurations[2] = dict(N_x=50, Ny=50, M_x=3, M_y=3)
    # # configurations[3] = dict(N_x=70, Ny=70, M_x=2, M_y=2)
    # # configurations[4] = dict(N_x=70, Ny=50, M_x=2, M_y=2)
    # # configurations[5] = dict(N_x=70, Ny=70, M_x=3, M_y=3)
    # # configurations[6] = dict(N_x=100, Ny=100, M_x=3, M_y=2)
    # # configurations[7] = dict(N_x=100, Ny=100, M_x=3, M_y=3)
    # configurations[8] = dict(N_x=50, Ny=50, M_x=4, M_y=4)

    # line and marker parameters
    colors = ['darkred', 'r',
              'navy', 'dodgerblue',
              'darkgreen', 'olivedrab',
              'darkviolet', 'magenta',
              'brown', 'darkorange']

    markers = {"advection": 'o',
               "sprog": None}

    # minimum lead time to plot (minutes)
    minleadtime = 5
    # maximum lead time to plot (minutes)
    maxleadtime = 120
    # nowcast methods to include in the plot
    nowcast_methods = ["advection", "sprog"]

    fig_csi = figure()
    ax_csi = fig_csi.gca()
    fig_rmse = figure()
    ax_rmse = fig_rmse.gca()

    i = 0

    for ncm in nowcast_methods:
        for config_number in config_to_plot:
            color = colors[(i - 1) % len(config_to_plot)]
            data_dir = './data/darts_tests/config_{:d}'.format(config_number)
            output_path = join(data_dir,
                               "optflow_comparison_results_{}_us.dat".format(ncm))

            with open(output_path, "rb") as f:
                results = pickle.load(f)

            n_samples = array(results['darts']["n_samples"])

            ncm_ = "Advection" if ncm == "advection" else "S-PROG"
            lbl = ncm_ + ' / config' + str(config_number)

            csi = array(results['darts']["CSI"]) / n_samples

            leadtimes = (arange(len(csi)) + 1) * 5

            ax_csi.plot(leadtimes, csi, color=color,
                        marker=markers[ncm], label=lbl, lw=2, ms=6)
            rmse = array(results['darts']["RMSE"]) / n_samples

            ax_rmse.plot(leadtimes, rmse, color=color,
                         marker=markers[ncm], label=lbl, lw=2, ms=6)

            i += 1

    ax_csi.legend(loc=1, fontsize=12, ncol=2)
    ax_csi.set_xlabel("Lead time (minutes)", fontsize=12)
    ax_csi.set_ylabel("CSI", fontsize=12)
    ax_csi.grid(True)
    ax_csi.set_xlim(minleadtime, maxleadtime)
    ax_csi.set_title("US Composite: DARTS sensitivity")

    # ax_csi.set_ylim(0.35, 0.9)

    ax_rmse.legend(loc=4, fontsize=12)
    ax_rmse.set_xlabel("Lead time (minutes)", fontsize=12)
    ax_rmse.set_ylabel("MAE", fontsize=12)
    ax_rmse.grid(True)
    ax_rmse.set_xlim(minleadtime, maxleadtime)
    ax_rmse.set_title("US Composite: DARTS sensitivity")
    # ax_rmse.set_ylim(0.4, 4.2)

    create_dir("./results")
    fig_csi.savefig("./results/oflow_darts_sensitivity_csi_summary.pdf",
                    bbox_inches="tight")

    fig_rmse.savefig("./results/oflow_darts_sensitivity_mae_summary.pdf",
                     bbox_inches="tight")
