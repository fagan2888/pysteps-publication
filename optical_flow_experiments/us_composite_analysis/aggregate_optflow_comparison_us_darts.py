"""
This scripts reads the data generated by the
compute_optflow_comparison_us_darts.py script and
aggrates all the cases in one single file for each configuration tested.

The data is stored in ./data/darts_tests folder.

"""
from os.path import join

from pylab import *

import pickle
from datetime import datetime


def agregate(config_number, start_dates):
    # nowcast methods to include in the plot
    nowcast_methods = ["advection", "sprog"]

    data_dir = './data/darts_tests/config_{:d}'.format(config_number)

    file_path = join(data_dir, "optflow_comparison_results_{0}_{1}.dat")

    for ncm in nowcast_methods:

        results = None

        for start_date in start_dates:

            time_stamp = start_date.strftime("%Y%m%dT%H%M%S")

            file_name = file_path.format(ncm, time_stamp)

            with open(file_name, "rb") as f:
                _results = pickle.load(f)

                metric_values = _results['darts']["CSI"]

                if results is None:
                    results = _results
                else:
                    for key in _results.keys():
                        for lt in range(len(metric_values)):
                            results[key]["CSI"][lt] += _results[key]["CSI"][lt]
                            results[key]["RMSE"][lt] += _results[key]["RMSE"][lt]
                            results[key]["n_samples"][lt] += _results[key]["n_samples"][lt]

        data_dir = './data/darts_tests/config_{:d}'.format(config_number)

        output_path = join(data_dir,
                           "optflow_comparison_results_{}_us.dat".format(ncm))

        print(output_path)
        with open(output_path, "wb") as results_file:
            pickle.dump(results, results_file)


if __name__ == "__main__":
    precip_events = [("201104160800", "201104170000"),
                     ("201111152300", "201111161000"),
                     ("201304110000", "201304120000"),
                     ("201304041800", "201304051800"),
                     ("201305180600", "201305181200"),
                     ("201305270000", "201305271200"),
                     ]
    start_dates = [datetime.strptime(pe[0], "%Y%m%d%H%M") for pe in precip_events]

    for config_number in range(1, 9):
        agregate(config_number, start_dates)
